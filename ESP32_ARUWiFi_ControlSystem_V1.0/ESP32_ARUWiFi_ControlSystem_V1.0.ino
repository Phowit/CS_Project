//ESP32_ARUWiFi_InputSystem_V1.0 ---> ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
// ‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡πà‡∏≠‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 3.3V ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡∏≤ 34‚Äì39 ‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏á‡∏à‡∏£ protection ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏û‡∏ß‡∏Å‡∏Ç‡∏≤ I/O ‡∏õ‡∏Å‡∏ï‡∏¥
#include <WiFi.h>                 // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi
#include <HTTPClient.h>           // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á/‡∏£‡∏±‡∏ö HTTP Request (‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤)
#include <WiFiClientSecure.h>     // ‡πÅ‡∏ó‡∏ô <WiFiClientSecureBearSSL.h>
#include <WebServer.h>
#include <Ultrasonic.h>           // ‡πÅ‡∏ó‡∏ô <NewPing.h>
#include <ESP32Servo.h>  // ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô Servo.h

WebServer server(80); // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡∏´‡∏•‡∏±‡∏á include

// ‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠ Relay ---------------------------------------
const int relay_motor = 25;
const int relay_BVtem = 26;
const int relay_BVwater = 27;
const int relay_BVfoodS = 14;
// ‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠ Relay ---------------------------------------

// ===== WiFi ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢ =====
const char* studentUser = "16432048";   // üëà ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
const char* studentPass = "26062545"; // üëà ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô

const char* aruSSIDs[] = { "Zyxel"};  //"ARU_WiFi", "ARU_WIFI", , "ARU-WiFi2" 
const size_t aruSSIDsCount = sizeof(aruSSIDs) / sizeof(aruSSIDs[0]);
const char* aruLoginUrl = "https://login1.aru.ac.th/index.jsp?action=login";

const unsigned long WIFI_CONNECT_TIMEOUT = 15000UL;

// ===== ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ WiFi ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢ =====
bool scanAndConnectARU() {
  int n = WiFi.scanNetworks();
  //WiFi.scanNetworks() ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô Arduino (‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô ESP8266 / ESP32) ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ WiFi ‡∏£‡∏≠‡∏ö ‡πÜ
  //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞ ‚Äú‡∏ö‡∏•‡πá‡∏≠‡∏Å‚Äù (‡∏Ñ‡∏∑‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏≠‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß) ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2‚Äì4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  //‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ WiFi ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ n

  if (n <= 0) return false;   // ‡∏ñ‡πâ‡∏≤ n <= 0 ‡∏Ñ‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ WiFi ‡πÑ‡∏´‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏à‡∏≠‡πÄ‡∏•‡∏¢
  for (int i = 0; i < n; ++i) {   //‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö WiFi ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    String s = WiFi.SSID(i);  //‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ SSID (‡∏ä‡∏∑‡πà‡∏≠ WiFi) ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ s
    Serial.print("Found WiFi: ");
    Serial.println(s);

    for (size_t j = 0; j < aruSSIDsCount; ++j) {  //‡∏ß‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠ WiFi ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠ (s) ‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ WiFi ‡∏Ç‡∏≠‡∏á‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢ ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
      if (s == String(aruSSIDs[j])) {  //‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô WiFi ‡∏Ç‡∏≠‡∏á‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏à‡∏£‡∏¥‡∏á
        Serial.print("Connecting to ");
        Serial.println(s);
        WiFi.begin(s.c_str());  //‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö WiFi ‡∏ô‡∏±‡πâ‡∏ô (‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ WiFi ‡∏Ç‡∏≠‡∏á‡∏°‡∏´‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô open network + login ‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)

        //‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (WL_CONNECTED) ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ true
        unsigned long start = millis();
        while (millis() - start < WIFI_CONNECT_TIMEOUT) {
          if (WiFi.status() == WL_CONNECTED) return true;
          delay(200);
        }
      }
    }
  }
  return false;
}

// ===== ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ login WiFi ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢ =====
bool loginARU(const String &user, const String &pass) {
  WiFiClientSecure client;  // ESP32 ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ
  client.setInsecure();     // ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á

  HTTPClient http;
  http.begin(client, aruLoginUrl);
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");

  String body = "username=" + user +
                "&password=" + pass +
                "&mac=&ipv4=" + WiFi.localIP().toString() +
                "&ipv6=&loginType=specific&loginMethod=ldap&hash&hashc=3c5303974f350074442ed0e33a8da8e4&submit=Log+In";

  int code = http.POST(body);
  Serial.print("Login response code: ");
  Serial.println(code);
  http.end();

  return (code == 200 || code == 302);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ request /data
void handleData() {
  if (server.hasArg("value")) {
    String value = server.arg("value");  // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å URL
    Serial.println("Received value: " + value);

    if (value == "11") {
      // ----- ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏ä‡πà‡∏≠‡∏á 1 -----
      digitalWrite(relay_motor, HIGH);  // ‡∏ñ‡πâ‡∏≤‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå Active LOW ‚Üí LOW = ON
      Serial.println("Relay 1 ON");
      server.send(200, "text/plain", "OK: Relay 1 ON");
    }
    else if (value == "10") {
      // ----- ‡∏õ‡∏¥‡∏î‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏ä‡πà‡∏≠‡∏á 1 -----
      digitalWrite(relay_motor, LOW);  // HIGH = OFF
      Serial.println("Relay 1 OFF");
      server.send(200, "text/plain", "OK: Relay 1 OFF");
    }
    else if (value == "21") {
      // ----- ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏ä‡πà‡∏≠‡∏á 2 -----
      digitalWrite(relay_BVtem, HIGH);  // LOW = ON
      Serial.println("Relay 2 ON");
      server.send(200, "text/plain", "OK: Relay 2 ON");
    }
    else if (value == "20") {
      // ----- ‡∏õ‡∏¥‡∏î‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏ä‡πà‡∏≠‡∏á 2 -----
      digitalWrite(relay_BVtem, LOW);  // HIGH = OFF
      Serial.println("Relay 2 OFF");
      server.send(200, "text/plain", "OK: Relay 2 OFF");
    }
    else if (value == "31") {
      // ----- ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏ä‡πà‡∏≠‡∏á 3 -----
      digitalWrite(relay_BVwater, HIGH);  // LOW = ON
      Serial.println("Relay 3 ON");
      server.send(200, "text/plain", "OK: Relay 3 ON");
    }
    else if (value == "30") {
      // ----- ‡∏õ‡∏¥‡∏î‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏ä‡πà‡∏≠‡∏á 3 -----
      digitalWrite(relay_BVwater, LOW);  // HIGH = OFF
      Serial.println("Relay 3 OFF");
      server.send(200, "text/plain", "OK: Relay 3 OFF");
    }
    else if (value == "41") {
      // ----- ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏ä‡πà‡∏≠‡∏á 4 -----
      digitalWrite(relay_BVfoodS, HIGH);  // LOW = ON
      Serial.println("Relay 4 ON");
      server.send(200, "text/plain", "OK: Relay 4 ON");
    }
    else if (value == "40") {
      // ----- ‡∏õ‡∏¥‡∏î‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏ä‡πà‡∏≠‡∏á 4 -----
      digitalWrite(relay_BVfoodS, LOW);  // HIGH = OFF
      Serial.println("Relay 4 OFF");
      server.send(200, "text/plain", "OK: Relay 4 OFF");
    }
    else {
      // ----- ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á -----
      server.send(400, "text/plain", "ERROR: Unknown value");
    }
  } 
  else {
    // ----- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ value ‡∏™‡πà‡∏á‡∏°‡∏≤ -----
    server.send(400, "text/plain", "ERROR: No value received");
  }
}

// ===== ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á WiFi ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢ =====


// ‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤ ---------------------------------------
unsigned long previousSensorMillis = 0;
unsigned long previousServoMillis = 0;
unsigned long previousSendMillis = 0;

const unsigned long sensorInterval = 60000;   // ‡∏£‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô sensor
const unsigned long servoInterval = 60000;   // ‡∏£‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô sensor
const unsigned long sendInterval   = 900000;  // ‡∏£‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// 1 minute = 60000 millisecond
// 5 minute = 300000 millisecond
// 15 minute = 900000 millisecond
// ‡∏à‡∏ö ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤ ---------------------------------------

// ===== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Ultrasonic sensor =====
#define TRIG_PIN_TRAY1 32 //‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ 34-39 ‡πÄ‡∏õ‡πá‡∏ô Output (trig)
#define ECHO_PIN_TRAY1 35

#define TRIG_PIN_TRAY2 33 //‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ 34-39 ‡πÄ‡∏õ‡πá‡∏ô Output (trig)
#define ECHO_PIN_TRAY2 34

Ultrasonic ultrasonic1(TRIG_PIN_TRAY1, ECHO_PIN_TRAY1);
Ultrasonic ultrasonic2(TRIG_PIN_TRAY2, ECHO_PIN_TRAY2);
// ===== ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Ultrasonic sensor =====


// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå servo ---------------------------------------
Servo servo1;
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå servo ---------------------------------------


// ===== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏ß‡πá‡∏ö =====
const char* serverName = "http://192.168.1.55/CS_Project/CS_Project_Phowit-Chuachan_Code_16432048/data.php"; 

long FoodTrayLevel1 = 0;
long FoodTrayLevel2 = 0;
// ===== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏ß‡πá‡∏ö =====


// ====== ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ======
void setup() {
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ relay ‡πÄ‡∏õ‡πá‡∏ô Output
  pinMode(relay_motor, OUTPUT);
  pinMode(relay_BVtem, OUTPUT);
  pinMode(relay_BVwater, OUTPUT);
  pinMode(relay_BVfoodS, OUTPUT);
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å Relay
  digitalWrite(relay_motor, LOW);
  digitalWrite(relay_BVtem, LOW);
  digitalWrite(relay_BVwater, LOW);
  digitalWrite(relay_BVfoodS, LOW);

  // Attach Servo
  servo1.attach(12);

  servo1.write(90);
  // servo.write(0)	--> ‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏∏‡∏î
  // servo.write(90)	--> ‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏°‡∏∏‡∏ô
  // servo.write(180)	--> ‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏∏‡∏î

  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(1000); // ‡∏£‡∏≠‡∏™‡∏±‡∏Å 1 ‡∏ß‡∏¥‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö WiFi ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πÅ‡∏Å‡∏ô

  Serial.println("Trying ARU WiFi...");
  if (scanAndConnectARU()) {
    Serial.print("Connected to ARU, IP: ");
    Serial.println(WiFi.localIP());
    delay(500);
    Serial.println("Logging into ARU...");
    if (loginARU(studentUser, studentPass)) {
      Serial.println("ARU login success (or request sent).");
    } else {
      Serial.println("ARU login failed -> reboot");
      delay(1000);
      ESP.restart();
    }
  } else {
    Serial.println("No ARU SSID found -> reboot");
    delay(1000);
    ESP.restart();
  }

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ route /data
  server.on("/data", handleData);

  // ‡πÄ‡∏£‡∏¥‡πà‡∏° server
  server.begin();
  Serial.println("HTTP server started");
}

// ====== ‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å ======
void loop() {
  unsigned long currentMillis = millis();

  server.handleClient(); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö client request

  // ------- ‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô sensor ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ -------
  if (currentMillis - previousSensorMillis >= sensorInterval) {
      previousSensorMillis = currentMillis;

      // ‡∏≠‡πà‡∏≤‡∏ô ultrasonic
      //FoodTrayLevel1 = ultrasonic1.read();
      //delay(50);
      //FoodTrayLevel2 = ultrasonic2.read();

      // log ‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏ô‡∏≤‡∏ó‡∏µ
      Serial.print("LOG: FTL1="); Serial.print(FoodTrayLevel1);
      Serial.print(", FTL2="); Serial.println(FoodTrayLevel2);
  }
  // ------- ‡∏à‡∏ö ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô sensor ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ -------

  // ------- ‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö servo ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ) -------
  if (currentMillis - previousServoMillis >= servoInterval) {
      previousServoMillis = currentMillis;

      Serial.println("Servo rotate left");
      servo1.write(0);  //	--> ‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏∏‡∏î
      delay(500);

      Serial.println("Servo stop");
      servo1.write(90); //--> ‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏°‡∏∏‡∏ô
      delay(500);

      Serial.println("Servo rotate right");
      servo1.write(180); //	--> ‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏∏‡∏î
      delay(500);

      Serial.println("Servo stop");
      servo1.write(90); //--> ‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏°‡∏∏‡∏ô
  }
  // ------- ‡∏à‡∏ö ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö servo ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ) -------

  // ------- ‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å 15 ‡∏ô‡∏≤‡∏ó‡∏µ -------
  if (currentMillis - previousSendMillis >= sendInterval) {
    previousSendMillis = currentMillis;

    if (WiFi.status() == WL_CONNECTED) {
      String url =  String(serverName) + "?board=2" +
                    "&FTL1=" + String(FoodTrayLevel1) + 
                    "&FTL2=" + String(FoodTrayLevel2);
      Serial.println("Request: " + url);

      HTTPClient http;
      http.setReuse(false);
      http.begin(url);
      http.setTimeout(10000);
      int httpCode = http.GET(); // ‡∏™‡πà‡∏á request

        if (httpCode > 0) {
          Serial.print("Response code: ");
          Serial.println(httpCode);
          String payload = http.getString();
          Serial.println("Server response: " + payload);
        } else {
          Serial.println("Error on sending request");
        }

      http.end();
    } else {
      Serial.println("WiFi disconnected!");
    }
  }
}