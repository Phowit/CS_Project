//ESP32_ARUWiFi_InputSystem_V1.0 ---> ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
// ‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡πà‡∏≠‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 3.3V ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡∏≤ 34‚Äì39 ‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏á‡∏à‡∏£ protection ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏û‡∏ß‡∏Å‡∏Ç‡∏≤ I/O ‡∏õ‡∏Å‡∏ï‡∏¥
#include <WiFi.h>                 // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi
#include <HTTPClient.h>           // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á/‡∏£‡∏±‡∏ö HTTP Request (‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤)
#include <WiFiClientSecure.h>     // ‡πÅ‡∏ó‡∏ô <WiFiClientSecureBearSSL.h>
#include <Ultrasonic.h>           // ‡πÅ‡∏ó‡∏ô <NewPing.h>


// ===== WiFi ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢ =====
const char* studentUser = "16432048";   // üëà ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
const char* studentPass = "26062545"; // üëà ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô

const char* aruSSIDs[] = { "ARU_WiFi", "ARU_WIFI", "Zyxel", "ARU-WiFi2" };
const size_t aruSSIDsCount = sizeof(aruSSIDs) / sizeof(aruSSIDs[0]);
const char* aruLoginUrl = "https://login1.aru.ac.th/index.jsp?action=login";

const unsigned long WIFI_CONNECT_TIMEOUT = 15000UL;

// ===== ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ WiFi ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢ =====
bool scanAndConnectARU() {
  int n = WiFi.scanNetworks();
  //WiFi.scanNetworks() ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô Arduino (‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô ESP8266 / ESP32) ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ WiFi ‡∏£‡∏≠‡∏ö ‡πÜ
  //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞ ‚Äú‡∏ö‡∏•‡πá‡∏≠‡∏Å‚Äù (‡∏Ñ‡∏∑‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏≠‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß) ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2‚Äì4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  //‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ WiFi ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ n

  if (n <= 0) return false;   // ‡∏ñ‡πâ‡∏≤ n <= 0 ‡∏Ñ‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ WiFi ‡πÑ‡∏´‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏à‡∏≠‡πÄ‡∏•‡∏¢
  for (int i = 0; i < n; ++i) {   //‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö WiFi ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    String s = WiFi.SSID(i);  //‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ SSID (‡∏ä‡∏∑‡πà‡∏≠ WiFi) ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ s
    Serial.print("Found WiFi: ");
    Serial.println(s);

    for (size_t j = 0; j < aruSSIDsCount; ++j) {  //‡∏ß‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠ WiFi ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠ (s) ‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ WiFi ‡∏Ç‡∏≠‡∏á‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢ ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
      if (s == String(aruSSIDs[j])) {  //‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô WiFi ‡∏Ç‡∏≠‡∏á‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏à‡∏£‡∏¥‡∏á
        Serial.print("Connecting to ");
        Serial.println(s);
        WiFi.begin(s.c_str());  //‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö WiFi ‡∏ô‡∏±‡πâ‡∏ô (‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ WiFi ‡∏Ç‡∏≠‡∏á‡∏°‡∏´‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô open network + login ‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)

        //‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (WL_CONNECTED) ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ true
        unsigned long start = millis();
        while (millis() - start < WIFI_CONNECT_TIMEOUT) {
          if (WiFi.status() == WL_CONNECTED) return true;
          delay(200);
        }
      }
    }
  }
  return false;
}

// ===== ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ login WiFi ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢ =====
bool loginARU(const String &user, const String &pass) {
  WiFiClientSecure client;  // ESP32 ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ
  client.setInsecure();     // ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á

  HTTPClient http;
  http.begin(client, aruLoginUrl);
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");

  String body = "username=" + user +
                "&password=" + pass +
                "&mac=&ipv4=" + WiFi.localIP().toString() +
                "&ipv6=&loginType=specific&loginMethod=ldap&hash&hashc=3c5303974f350074442ed0e33a8da8e4&submit=Log+In";

  int code = http.POST(body);
  Serial.print("Login response code: ");
  Serial.println(code);
  http.end();

  return (code == 200 || code == 302);
}
// ===== ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á WiFi ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢ =====


// ‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤ ---------------------------------------
unsigned long previousSensorMillis = 0;
unsigned long previousSendMillis = 0;

const unsigned long sensorInterval = 60000;   // ‡∏£‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô sensor
const unsigned long sendInterval   = 900000;  // ‡∏£‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// 10 second = 10000
// 30 second = 30000
// 1 minute = 60000 millisecond
// 5 minute = 300000 millisecond
// 15 minute = 900000 millisecond
// ‡∏à‡∏ö ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤ ---------------------------------------


// ===== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Temperature sensor =====
#define TEMP_PIN 35
const int R0 = 100000; // R0 = 100k
const int B = 4275; // B value of the thermistor
// ===== ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Temperature sensor =====


// ===== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Ultrasonic sensor =====
#define TRIG_PIN 33
#define ECHO_PIN 32

Ultrasonic ultrasonic(TRIG_PIN, ECHO_PIN);
// ===== ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Ultrasonic sensor =====


// ===== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Water sensor =====
const int WaterSensorHigh = 25;
const int WaterSensorLow = 26;
// ===== ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Water sensor =====


// ===== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏ß‡πá‡∏ö =====
const char* serverName = "http://192.168.1.55/CS_Project/CS_Project_Phowit-Chuachan_Code_16432048/data.php"; 

float latestTemperature = 0;
int latestWaterHigh = 0;
int latestWaterLow = 0;
long FoodLevel = 0;
// ===== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏ß‡πá‡∏ö =====


// ====== ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ======
void setup() {
  pinMode(WaterSensorHigh, INPUT);
  pinMode(WaterSensorLow, INPUT);

  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(1000); // ‡∏£‡∏≠‡∏™‡∏±‡∏Å 1 ‡∏ß‡∏¥‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö WiFi ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πÅ‡∏Å‡∏ô

  Serial.println("Trying ARU WiFi...");
  if (scanAndConnectARU()) {
    Serial.print("Connected to ARU, IP: ");
    Serial.println(WiFi.localIP());
    delay(500);
    Serial.println("Logging into ARU...");
    if (loginARU(studentUser, studentPass)) {
      Serial.println("ARU login success (or request sent).");
    } else {
      Serial.println("ARU login failed -> reboot");
      delay(1000);
      ESP.restart();
    }
  } else {
    Serial.println("No ARU SSID found -> reboot");
    delay(1000);
    ESP.restart();
  }
}

// ====== ‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å ======
void loop() {
    unsigned long currentMillis = millis();

  // ------- ‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô sensor ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ -------
  if (currentMillis - previousSensorMillis >= sensorInterval) {
      previousSensorMillis = currentMillis;

      // ‡∏≠‡πà‡∏≤‡∏ô temperature
      int Temperature_Value = analogRead(TEMP_PIN);
      if (Temperature_Value != 0) {
        float Resistance = 4095.0 / Temperature_Value - 1.0;
        Resistance = R0 * Resistance;
        latestTemperature = 1.0 / (log(Resistance / R0) / B + 1 / 298.15) - 273.15;
      }

      // ‡∏≠‡πà‡∏≤‡∏ô ultrasonic
      FoodLevel = ultrasonic.read();

      // ‡∏≠‡πà‡∏≤‡∏ô water sensor
      latestWaterHigh = digitalRead(WaterSensorHigh);
      latestWaterLow = digitalRead(WaterSensorLow);

      // log ‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏ô‡∏≤‡∏ó‡∏µ
      Serial.print("LOG: TEMP="); Serial.print(latestTemperature);
      Serial.print(", S1="); Serial.print(FoodLevel);
      Serial.print(", W1="); Serial.print(latestWaterHigh);
      Serial.print(", W2="); Serial.println(latestWaterLow);
  }
  // ------- ‡∏à‡∏ö ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô sensor ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ -------

  // ------- ‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å 15 ‡∏ô‡∏≤‡∏ó‡∏µ -------
  if (currentMillis - previousSendMillis >= sendInterval) {
    previousSendMillis = currentMillis;

    if (WiFi.status() == WL_CONNECTED) {
      String url =  String(serverName) + 
                    "?temp=" + String(latestTemperature) + 
                    "&ultra=" + String(FoodLevel) + 
                    "&waterh=" + String(latestWaterHigh) +
                    "&waterl=" + String(latestWaterLow);
      Serial.println("Request: " + url);

      HTTPClient http;
      http.begin(url);
      int httpCode = http.GET(); // ‡∏™‡πà‡∏á request

        if (httpCode > 0) {
          Serial.print("Response code: ");
          Serial.println(httpCode);
          String payload = http.getString();
          Serial.println("Server response: " + payload);
        } else {
          Serial.println("Error on sending request");
        }

      http.end();
    } else {
      Serial.println("WiFi disconnected!");
    }
  }
}